/**
 * @depracated It will be deleted cost is part of a third party library.
 */
CORE.classes.modal = {
    oDefault : {
		sUrl : '#', // Default URL to open
	    filters: [],	// List of filters used
		callbacks: {  // Sepcific callbacks
			beforeShowCont: function() {
				width = $('.nyroModalCont').width();
				height = $('.nyroModalCont').height();
				$('.nyroModalCont iframe').css('width', width);
				$('.nyroModalCont iframe').css('height', height);
			}
		},
        anims: {},	// Sepcific animations functions
        loadFilter: undefined,	// Name of the filter used for loading

        modal: false,	// Indicates if it's a modal window or not
        closeOnEscape: true,	// Indicates if the modal should close on Escape key
        closeOnClick: true,	// Indicates if a click on the background should close the modal
        useKeyHandler: false,	// Indicates if the modal has to handle key down event

        showCloseButton: true,	// Indicates if the closeButonn should be added
        closeButton: '<a href="#" class="nyroModalClose nyroModalCloseButton nmReposition" title="close">Close</a>',	// Close button HTML

        stack: false,	// Indicates if links automatically binded inside the modal should stack or not
        nonStackable: 'form',	// Filter to not stack DOM element

        header: undefined,	// header include in every modal
        footer: undefined,	// footer include in every modal

        // Specific confirguation for gallery filter
        galleryLoop: true,	// Indicates if the gallery should loop
        galleryCounts: true,	// Indicates if the gallery counts should be shown
        ltr: true, // Left to Right by default. Put to false for Hebrew or Right to Left language. Used in gallery filter

        // Specific confirguation for DOM filter
        domCopy: false, // Indicates if DOM element should be copied or moved

        // Specific confirguation for link and form filters
        ajax: {}, // Ajax options to be used in link and form filter

        // Specific confirguation for image filter
        imageRegex: '[^\.]\.(jpg|jpeg|png|tiff|gif|bmp)\s*$',	// Regex used to detect image link

        selIndicator: 'nyroModalSel', // Value added when a form or Ajax is sent with a filter content

        swfObjectId: undefined, // Object id for swf object
        swf:  {	// Default SWF attributes
            allowFullScreen: 'true',
            allowscriptaccess: 'always',
            wmode: 'transparent'
        },

        store: {},	// Storage object for filters.
        errorMsg: 'An error occured',	// Error message
        elts: {	// HTML elements for the modal
            all: undefined,
            bg: undefined,
            load: undefined,
            cont: undefined,
            hidden: undefined
        },
        sizes: {	// Size information
            initW: undefined,	// Initial width
            initH: undefined,	// Initial height
            w: undefined,		// width
            h: undefined,		// height
            minW: undefined,	// minimum Width
            minH: undefined,	// minimum height
            wMargin: undefined,	// Horizontal margin
            hMargin: undefined	// Vertical margin
        },
        anim: {	// Animation names to use
            def: undefined,			// Default animation set to use if sspecific are not defined or doesn't exist
            showBg: undefined,		// Set to use for showBg animation
            hideBg: undefined,		// Set to use for hideBg animation
            showLoad: undefined,	// Set to use for showLoad animation
            hideLoad: undefined,	// Set to use for hideLoad animation
            showCont: undefined,	// Set to use for showCont animation
            hideCont: undefined,	// Set to use for hideCont animation
            showTrans: undefined,	// Set to use for showTrans animation
            hideTrans: undefined,	// Set to use for hideTrans animation
            resize: undefined		// Set to use for resize animation
        },

        _open: false,	// Indicates if the modal is open
        _bgReady: false,	// Indicates if the background is ready
        _opened: false,	// Indicates if the modal was opened (useful for stacking)
        _loading: false,	// Indicates if the loading is shown
        _animated: false,	// Indicates if the modal is currently animated
        _transition: false,	//Indicates if the modal is in transition
        _nmOpener: undefined,	// nmObj of the modal that opened the current one in non stacking mode
        _nbContentLoading: 0,	// Counter for contentLoading call
        _scripts: '',	// Scripts tags to be included
        _scriptsShown: ''	//Scripts tags to be included once the modal is swhon
    }
};

CORE.classes.modal.init = function (oOptions){

    var self = this;
    var Cm = CORE.modules;
    var Cc = CORE.classes;
    var Cg = CORE.globals;
    var oSettings = self.oDefault;
    var key = '';

    for ( key in oOptions )	{
		if(oOptions.hasOwnProperty(key)) {
			oSettings[key] = oOptions[key];
		}
    }

    // Load the CSS
    if (oSettings.pathCss) {
		// Load the nyroModal Css
		//console.log (oSettings.pathCss);
		$(document.body).append('<link rel="stylesheet" type="text/css" href="'+ oSettings.pathCss +'" />');
    }

    if (Cg.isIE6) {

		$LAB.script(Cm.nyromodal_ie).wait( function() {
		    Cc.modal.load(oSettings);
		});
		
    }
    else
    {
	Cc.modal.bind(oSettings);
    }
	
};

CORE.classes.modal.autobind = function (oTarget){

	$(oTarget).nyroModal();

};

CORE.classes.modal.open = function (oOptions){

	var self = this;
	var oSettings = self.oDefault;

	if (oOptions === undefined)
	{
		var oOptions = {};
	}

	for ( key in oOptions )	{
		if(oOptions.hasOwnProperty(key)) {
			oSettings[key] = oOptions[key];
		}
    }


	if(oSettings.sUrl !== undefined || oSettings.sUrl !== '#') {
		$.nmManual(oSettings.sUrl, oSettings);
	}

};

CORE.classes.modal.close = function(){
	$.nmTop().close();
};